import discord
import os
import requests
import random
import re
from bs4 import BeautifulSoup
from urllib.parse import urlparse
from io import BytesIO
from googletrans import Translator

TOKEN = os.getenv("DISCORD_BOT_TOKEN")

intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)
translator = Translator()

def extract_content(url):
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        r = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(r.text, "html.parser")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ OG-–¥–∞–Ω–Ω—ã—Ö
        title = soup.find("meta", property="og:title")
        image = soup.find("meta", property="og:image")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        article_text = ""
        
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        article = soup.find('article') or soup.find(class_=re.compile('article|content|post|story'))
        
        if article:
            paragraphs = article.find_all('p')
            article_text = ' '.join([p.text for p in paragraphs])
        else:
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –±–µ—Ä–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            paragraphs = soup.find_all('p')
            article_text = ' '.join([p.text for p in paragraphs])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
        lang = 'en' if is_english(article_text) else 'ru'
            
        return {
            "title": title["content"] if title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞",
            "image_url": image["content"] if image else None,
            "text": article_text,
            "lang": lang
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return {
            "title": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", 
            "image_url": None,
            "text": "",
            "lang": "ru"
        }

def is_english(text):
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
    english_words = ['the', 'and', 'is', 'in', 'it', 'to', 'of', 'for', 'with', 'on']
    text_lower = text.lower()
    english_count = sum(1 for word in english_words if f" {word} " in text_lower)
    return english_count >= 3

def translate_text(text, from_lang='en', to_lang='ru'):
    try:
        translated = translator.translate(text, src=from_lang, dest=to_lang)
        return translated.text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

def rewrite_in_glossy_style(text, title, max_words=140):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    text_to_process = text[:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = split_into_sentences(text_to_process)
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ —Å—Ç–∏–ª–µ –∫–∞–Ω–∞–ª–∞
    glossy_intros = [
        "–í—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ, –Ω–æ...",
        "–°–µ—Ä—å–µ–∑–Ω–æ?",
        "–ë–æ–∂–µ, –∫–∞–∫ —ç—Ç–æ –±–æ–ª—å–Ω–æ –≤–∏–¥–µ—Ç—å.",
        "–¢—Ä—è—Å—É—â–∏–º–∏—Å—è —Ä—É–∫–∞–º–∏ –ª–∏—Å—Ç–∞—é –ª–µ–Ω—Ç—É.",
        "–ú–æ–¥–∞ —Å–Ω–æ–≤–∞ –æ–±–Ω–∞–∂–∞–µ—Ç –Ω–∞—à–∏ —Ä–∞–Ω—ã.",
        "–ò—Ä–æ–Ω–∏—è –∂–∏–∑–Ω–∏ —Ä–µ–∂–µ—Ç –ø–æ –∂–∏–≤–æ–º—É.",
        "–í —ç—Ç–æ–º –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞–¥–ª–æ–º–ª–µ–Ω–Ω–æ–µ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ.",
        "–°—Ç–∏–ª—å –∫–∞–∫ –¥–∏–∞–≥–Ω–æ–∑ —ç–ø–æ—Ö–∏.",
        "–ó–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π ‚Äî –≤—Å–µ–≥–¥–∞ —Ç—Ä–µ—â–∏–Ω–∞."
    ]
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è
    glossy_outros = [
        "#–û—Å–∫–æ–ª–∫–∏–ì–ª—è–Ω—Ü–∞",
        "–ú–æ–¥–∞ ‚Äî —ç—Ç–æ –¥–∏–∞–≥–Ω–æ–∑. –ù–∞—à –¥–∏–∞–≥–Ω–æ–∑.",
        "–í –∫–∞–∂–¥–æ–º —Ç—Ä–µ–Ω–¥–µ ‚Äî –Ω–∞—à–∞ –±–æ–ª—å.",
        "–°—Ç–∏–ª—å –≥–æ–≤–æ—Ä–∏—Ç –≥—Ä–æ–º—á–µ —Å–ª–æ–≤.",
        "–ì–ª—è–Ω–µ—Ü —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.",
        "–ú–æ–¥–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –Ω–∞—à–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ.",
        "–ó–∞ –∫–∞–∂–¥—ã–º –æ–±—Ä–∞–∑–æ–º ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Ç–µ—Ä–∏."
    ]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    if not sentences:
        content = f"{random.choice(glossy_intros)} {title}. {random.choice(glossy_outros)}"
    else:
        # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        selected_sentences = sentences[:min(3, len(sentences))]
        content_text = ' '.join(selected_sentences)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç
        content = f"{random.choice(glossy_intros)} {content_text}\n\n{random.choice(glossy_outros)}"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    words = content.split()
    if len(words) > max_words:
        content = ' '.join(words[:max_words])
    
    return content

def split_into_sentences(text):
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    text = text.replace('!', '.').replace('?', '.')
    sentences = [s.strip() for s in text.split('.') if s.strip()]
    return sentences

@client.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {client.user}")

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if message.content.startswith("http"):
        processing_msg = await message.channel.send("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")

        data = extract_content(message.content)
        title = data["title"]
        image_url = data["image_url"]
        text = data["text"]
        lang = data["lang"]
        
        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        if lang == 'en':
            await message.channel.send("üåê –¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –≤—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–≤–æ–¥...")
            text = translate_text(text, from_lang='en', to_lang='ru')
            title = translate_text(title, from_lang='en', to_lang='ru')
        
        # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª–µ –∫–∞–Ω–∞–ª–∞
        glossy_text = rewrite_in_glossy_style(text, title)

        if image_url:
            try:
                img_data = requests.get(image_url).content
                file = discord.File(BytesIO(img_data), filename="image.jpg")
                await processing_msg.delete()
                await message.channel.send(content=glossy_text, file=file)
                return
            except Exception as e:
                await processing_msg.delete()
                await message.channel.send(f"{glossy_text}\n(–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
                return

        await processing_msg.delete()
        await message.channel.send(glossy_text)
    elif message.content.startswith("!—Å—Ç–∏–ª—å "):
        # –ü—Ä—è–º–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Å—ã–ª–∫–∏
        text = message.content[7:]  # –£–±–∏—Ä–∞–µ–º "!—Å—Ç–∏–ª—å " –∏–∑ –Ω–∞—á–∞–ª–∞
        glossy_text = rewrite_in_glossy_style(text, "")
        await message.channel.send(glossy_text)
    else:
        await message.channel.send("üìé –ö–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '!—Å—Ç–∏–ª—å [—Ç–µ–∫—Å—Ç]', –∏ —è —Å–¥–µ–ª–∞—é –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ \"–û—Å–∫–æ–ª–∫–∏ –≥–ª—è–Ω—Ü–∞\".")

client.run(TOKEN)
